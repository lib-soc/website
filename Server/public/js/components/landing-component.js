
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteElement, i as init, a as attribute_to_object, b as insert_dev, s as safe_not_equal, d as dispatch_dev, c as validate_slots, o as onMount, e as element, f as space, n as noop, h as attr_dev, g as add_location, j as src_url_equal, l as append_dev, m as detach_dev } from './index-9ff7cb25.js';

/* src\landing-component.svelte generated by Svelte v3.52.0 */
const file = "src\\landing-component.svelte";

function create_fragment(ctx) {
	let div5;
	let picture;
	let source0;
	let t0;
	let source1;
	let t1;
	let img0;
	let t2;
	let div4;
	let p0;
	let t4;
	let div3;
	let div0;
	let h20;
	let t6;
	let img1;
	let img1_src_value;
	let t7;
	let p1;
	let t9;
	let div1;
	let h21;
	let t11;
	let img2;
	let img2_src_value;
	let t12;
	let p2;
	let t14;
	let div2;
	let h22;
	let t16;
	let img3;
	let img3_src_value;
	let t17;
	let p3;

	const block = {
		c: function create() {
			div5 = element("div");
			picture = element("picture");
			source0 = element("source");
			t0 = space();
			source1 = element("source");
			t1 = space();
			img0 = element("img");
			t2 = space();
			div4 = element("div");
			p0 = element("p");
			p0.textContent = "We are people united around a single cause of bringing down authoritarian exploitative systems represented by different forms of capitalism and replacing them with libertarian socialist systems to create a more equitable and democratic world.";
			t4 = space();
			div3 = element("div");
			div0 = element("div");
			h20 = element("h2");
			h20.textContent = "GROUPS";
			t6 = space();
			img1 = element("img");
			t7 = space();
			p1 = element("p");
			p1.textContent = "We organize into groups for education, advocacy and mutual aid. We aim to show people how the current politico-economic systems negatively affect our wellbeing, show them the alternatives, and engage in mutual aid to make our life under capitalism easier.";
			t9 = space();
			div1 = element("div");
			h21 = element("h2");
			h21.textContent = "COMMUNITIES";
			t11 = space();
			img2 = element("img");
			t12 = space();
			p2 = element("p");
			p2.textContent = "We build communities according to libertarian socialist principles where people own their land, their houses, the means of production and use direct democracy to make decisions. We are growing our socialist world one community at a time.";
			t14 = space();
			div2 = element("div");
			h22 = element("h2");
			h22.textContent = "COOPERATIVES";
			t16 = space();
			img3 = element("img");
			t17 = space();
			p3 = element("p");
			p3.textContent = "We create worker cooperatives in order to finance the functioning of our groups and communities. Economic power determines political power, therefore, establishing cooperatives is one of the first steps towards achieving socialism by providing democratic workplaces for workers instead of authoritarian capitalist businesses.";
			this.c = noop;
			attr_dev(source0, "srcset", "/img/crowd.webp");
			add_location(source0, file, 20, 8, 274);
			attr_dev(source1, "srcset", "/img/crowd.png");
			add_location(source1, file, 21, 8, 317);
			attr_dev(img0, "id", "crowd");
			attr_dev(img0, "alt", "crowd");
			add_location(img0, file, 22, 8, 359);
			add_location(picture, file, 19, 4, 255);
			add_location(p0, file, 26, 8, 450);
			add_location(h20, file, 29, 16, 771);
			attr_dev(img1, "id", "groups-img");
			if (!src_url_equal(img1.src, img1_src_value = "/img/common/groups.svg")) attr_dev(img1, "src", img1_src_value);
			attr_dev(img1, "alt", "groups");
			add_location(img1, file, 30, 16, 804);
			add_location(p1, file, 31, 16, 885);
			add_location(div0, file, 28, 12, 748);
			add_location(h21, file, 34, 16, 1204);
			attr_dev(img2, "id", "communities-img");
			if (!src_url_equal(img2.src, img2_src_value = "/img/common/communities.svg")) attr_dev(img2, "src", img2_src_value);
			attr_dev(img2, "alt", "communities");
			add_location(img2, file, 35, 16, 1242);
			add_location(p2, file, 36, 16, 1338);
			add_location(div1, file, 33, 12, 1181);
			add_location(h22, file, 39, 16, 1639);
			attr_dev(img3, "id", "coops-img");
			if (!src_url_equal(img3.src, img3_src_value = "/img/common/coops.svg")) attr_dev(img3, "src", img3_src_value);
			attr_dev(img3, "alt", "coops");
			add_location(img3, file, 40, 16, 1678);
			add_location(p3, file, 41, 16, 1756);
			add_location(div2, file, 38, 12, 1616);
			attr_dev(div3, "id", "container-grid");
			add_location(div3, file, 27, 8, 709);
			attr_dev(div4, "id", "text-container");
			add_location(div4, file, 25, 4, 415);
			attr_dev(div5, "id", "container");
			add_location(div5, file, 18, 0, 229);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div5, anchor);
			append_dev(div5, picture);
			append_dev(picture, source0);
			append_dev(picture, t0);
			append_dev(picture, source1);
			append_dev(picture, t1);
			append_dev(picture, img0);
			append_dev(div5, t2);
			append_dev(div5, div4);
			append_dev(div4, p0);
			append_dev(div4, t4);
			append_dev(div4, div3);
			append_dev(div3, div0);
			append_dev(div0, h20);
			append_dev(div0, t6);
			append_dev(div0, img1);
			append_dev(div0, t7);
			append_dev(div0, p1);
			append_dev(div3, t9);
			append_dev(div3, div1);
			append_dev(div1, h21);
			append_dev(div1, t11);
			append_dev(div1, img2);
			append_dev(div1, t12);
			append_dev(div1, p2);
			append_dev(div3, t14);
			append_dev(div3, div2);
			append_dev(div2, h22);
			append_dev(div2, t16);
			append_dev(div2, img3);
			append_dev(div2, t17);
			append_dev(div2, p3);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('landing-component', slots, []);

	onMount(() => {
		
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<landing-component> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ onMount });
	return [];
}

class Landing_component extends SvelteElement {
	constructor(options) {
		super();
		this.shadowRoot.innerHTML = `<style>@import '/css/common.css';#container-grid>div>h2{text-align:center}#groups-img{position:absolute;width:14rem;left:50%;transform:translate(-50%);z-index:0;opacity:0.2}#communities-img{position:absolute;width:11rem;left:50%;transform:translate(-50%);z-index:0;opacity:0.2}#coops-img{position:absolute;width:10.5rem;left:50%;transform:translate(-50%);z-index:0;opacity:0.2}#text-container{max-width:calc(100vw - 4rem);margin:auto}#crowd{width:100%;margin-bottom:2rem}#container{margin:auto;max-width:1200px;margin-top:2rem;margin-bottom:5rem}#container>div>p{margin-bottom:1rem}#container p{font-size:1.2rem;text-align:justify}#container-grid{display:grid;grid-template-columns:1fr 1fr 1.3fr;grid-gap:3rem}#container-grid>div{position:relative}#container-grid>div>p{position:relative;margin-top:7rem;z-index:2}@media only screen and (max-width: 1000px){#container-grid{display:grid;grid-template-columns:1fr;grid-gap:2rem}}</style>`;

		init(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object(this.attributes),
				customElement: true
			},
			instance,
			create_fragment,
			safe_not_equal,
			{},
			null
		);

		if (options) {
			if (options.target) {
				insert_dev(options.target, this, options.anchor);
			}
		}
	}
}

customElements.define("landing-component", Landing_component);

export { Landing_component as default };
