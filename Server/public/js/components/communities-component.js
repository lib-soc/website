
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteElement, i as init, a as attribute_to_object, b as insert_dev, s as safe_not_equal, v as validate_each_argument, d as dispatch_dev, c as validate_slots, o as onMount, e as element, f as space, n as noop, g as add_location, h as attr_dev, j as src_url_equal, p as set_custom_element_data, k as append_dev, l as detach_dev, m as destroy_each, t as text } from './index-3b678a7c.js';
import { communities, addMarkersCommunities } from '../../../../../../../../../js/communities.js';
import '../../../../../../../../../js/components/map-component.js';

/* src\communities-component.svelte generated by Svelte v3.52.0 */

const file = "src\\communities-component.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (32:8) {#each communities as community}
function create_each_block(ctx) {
	let div;
	let p0;
	let b0;
	let t1_value = /*community*/ ctx[1].location[0] + "";
	let t1;
	let t2;
	let p1;
	let b1;
	let t4_value = /*community*/ ctx[1].status + "";
	let t4;
	let t5;
	let p2;
	let b2;
	let t7_value = /*community*/ ctx[1].members + "";
	let t7;
	let t8;
	let p3;
	let b3;
	let a;
	let t10_value = /*community*/ ctx[1].contact[1] + "";
	let t10;
	let t11;

	const block = {
		c: function create() {
			div = element("div");
			p0 = element("p");
			b0 = element("b");
			b0.textContent = "Location: ";
			t1 = text(t1_value);
			t2 = space();
			p1 = element("p");
			b1 = element("b");
			b1.textContent = "Status: ";
			t4 = text(t4_value);
			t5 = space();
			p2 = element("p");
			b2 = element("b");
			b2.textContent = "Members: ";
			t7 = text(t7_value);
			t8 = space();
			p3 = element("p");
			b3 = element("b");
			b3.textContent = "Contact: ";
			a = element("a");
			t10 = text(t10_value);
			t11 = space();
			add_location(b0, file, 33, 19, 1800);
			add_location(p0, file, 33, 16, 1797);
			add_location(b1, file, 34, 19, 1865);
			add_location(p1, file, 34, 16, 1862);
			add_location(b2, file, 35, 19, 1923);
			add_location(p2, file, 35, 16, 1920);
			add_location(b3, file, 36, 19, 1983);
			attr_dev(a, "href", /*community*/ ctx[1].contact[0]);
			attr_dev(a, "target", ";_blank;");
			attr_dev(a, "rel", "noreferrer");
			add_location(a, file, 36, 35, 1999);
			add_location(p3, file, 36, 16, 1980);
			attr_dev(div, "class", "location-info");
			add_location(div, file, 32, 12, 1752);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p0);
			append_dev(p0, b0);
			append_dev(p0, t1);
			append_dev(div, t2);
			append_dev(div, p1);
			append_dev(p1, b1);
			append_dev(p1, t4);
			append_dev(div, t5);
			append_dev(div, p2);
			append_dev(p2, b2);
			append_dev(p2, t7);
			append_dev(div, t8);
			append_dev(div, p3);
			append_dev(p3, b3);
			append_dev(p3, a);
			append_dev(a, t10);
			append_dev(div, t11);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(32:8) {#each communities as community}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let h1;
	let t1;
	let img;
	let img_src_value;
	let t2;
	let p;
	let t4;
	let h3;
	let t6;
	let map_component;
	let t7;
	let h4;
	let t9;
	let each_value = communities;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			h1.textContent = "Communities";
			t1 = space();
			img = element("img");
			t2 = space();
			p = element("p");
			p.textContent = "We establish libertarian socialist communities by buying land, housing and the means of production which are then owned by the members of these communities. There is no private property within the communities and, therefore, exploitation and suffering that comes with it. Decisions are made using direct democracy with a focus on consensus, ensuring that each community member has power over decisions that affect their life. Communities try to establish their own cooperatives in order to finance their development becoming financially independent and sustainable, which allows for their survival and growth. Within communities the gift economy is utilized whenever possible. Each community is a small beacon of socialism within the dark capitalist world showing us how good life can be if only we achieve our goal.";
			t4 = space();
			h3 = element("h3");
			h3.textContent = "Our communities";
			t6 = space();
			map_component = element("map-component");
			t7 = space();
			h4 = element("h4");
			h4.textContent = "Europe";
			t9 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.c = noop;
			add_location(h1, file, 25, 8, 612);
			attr_dev(img, "id", "communities-img");
			if (!src_url_equal(img.src, img_src_value = "/img/common/communities.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "communities");
			add_location(img, file, 26, 8, 642);
			add_location(p, file, 27, 8, 730);
			add_location(h3, file, 28, 8, 1563);
			set_custom_element_data(map_component, "id", "map");
			set_custom_element_data(map_component, "callback", /*mapCallbackCommunities*/ ctx[0]);
			add_location(map_component, file, 29, 8, 1597);
			add_location(h4, file, 30, 8, 1681);
			attr_dev(div0, "id", "text-container");
			add_location(div0, file, 24, 4, 577);
			attr_dev(div1, "id", "container");
			add_location(div1, file, 22, 0, 490);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, h1);
			append_dev(div0, t1);
			append_dev(div0, img);
			append_dev(div0, t2);
			append_dev(div0, p);
			append_dev(div0, t4);
			append_dev(div0, h3);
			append_dev(div0, t6);
			append_dev(div0, map_component);
			append_dev(div0, t7);
			append_dev(div0, h4);
			append_dev(div0, t9);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*communities*/ 0) {
				each_value = communities;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('communities-component', slots, []);

	function mapCallbackCommunities(createMap) {
		let map = createMap([51.505, -0.09], 3);
		addMarkersCommunities(map);
	}

	onMount(() => {
		
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<communities-component> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		onMount,
		communities,
		addMarkersCommunities,
		mapCallbackCommunities
	});

	return [mapCallbackCommunities];
}

class Communities_component extends SvelteElement {
	constructor(options) {
		super();
		this.shadowRoot.innerHTML = `<style>@import '/css/common.css';#communities-img{position:absolute;width:11rem;left:50%;transform:translate(-50%);z-index:0;opacity:0.2}#text-container>:nth-child(3){margin-top:8rem}h4{margin-bottom:2rem}.location-info{position:relative;margin-bottom:2rem}.location-info p{margin-bottom:0}a{font-size:1.15rem;color:#DD1C1A}#map{--height:30rem;--width:100%;--margin-bottom:3rem}#text-container{max-width:calc(100vw - 4rem);margin:auto}h1{margin-bottom:1rem;font-size:2.5rem;text-align:center}h3{margin-bottom:1rem}#container{margin:auto;max-width:1200px;margin-top:1rem;margin-bottom:4rem}#container>div>p{margin-bottom:1rem}#container p{font-size:1.15rem;text-align:justify}</style>`;

		init(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object(this.attributes),
				customElement: true
			},
			instance,
			create_fragment,
			safe_not_equal,
			{},
			null
		);

		if (options) {
			if (options.target) {
				insert_dev(options.target, this, options.anchor);
			}
		}
	}
}

customElements.define("communities-component", Communities_component);

export { Communities_component as default };
